- name: Create k8s user
  user:
    name: k8s
    shell: /bin/bash
    home: /home/k8s

- name: update APT packages
  apt:
    update_cache: yes

- name: disable SWAP (Kubeadm requirement)
  shell: |
    swapoff -a

- name: disable SWAP in fstab (Kubeadm requirement)
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'

- name: Download the Docker apt-key
  get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker-apt-keyring.asc
    mode: '0644'
    force: true

- name: add Docker's APT repository
  apt_repository:
    repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }} signed-by=/etc/apt/keyrings/docker-apt-keyring.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    filename: docker.list

- name: Download the Kubernetes apt-key
  get_url:
    url: https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key
    dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
    mode: '0644'
    force: true

- name: add Kubernetes' APT repository
  apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /"
    state: present
    filename: kubernetes.list

- name: update APT packages again
  apt:
    update_cache: yes

- name: install Containerd
  apt:
    name: containerd.io=1.7.27-1

- name: create Containerd directory
  file:
    path: /etc/containerd
    state: directory

# When containerd is installed from deb it use a non-default config. Reset it to default.
- name: reset containerd config
  shell: /usr/bin/containerd config default > /etc/containerd/config.toml

# tell containerd to use systemd to limit container resources as this is what kubelet defaults to
- name: configuring the systemd cgroup driver for Containerd
  lineinfile:
    path: /etc/containerd/config.toml
    regexp: '            SystemdCgroup = false'
    line: '            SystemdCgroup = true'

- name: enable the Containerd service and start it
  systemd:
    name: containerd
    state: restarted
    enabled: yes
    daemon-reload: yes

- name: install Kubeadm, Kubelet and Kubectl
  apt:
    name: 
      - kubelet=1.32.3-1.1
      - kubeadm=1.32.3-1.1
      - kubectl=1.32.3-1.1

- name: load br_netfilter kernel module needed for flannel
  modprobe:
    name: br_netfilter
    state: present

- name: set bridge-nf-call-iptables needed for ip forwarding with iptables
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: 1

- name: set bridge-nf-call-ip6tables needed for ip forwarding with ip6tables
  sysctl:
    name: net.bridge.bridge-nf-call-ip6tables
    value: 1

- name: set ip_forward needed for ip forwarding with sysctl
  sysctl:
    name: net.ipv4.ip_forward
    value: 1

- name: Enable the kubelet service before running kubeadm
  systemd:
    name: kubelet
    state: restarted
    enabled: yes
    daemon-reload: yes

- name: create an empty file for Kubeadm configuring
  copy:
    content: ""
    dest: /etc/kubernetes/kubeadm-config.yaml
    force: no

- name: create config for kubeadm
  blockinfile:
    path: /etc/kubernetes/kubeadm-config.yaml
    block: |
          kind: ClusterConfiguration
          apiVersion: kubeadm.k8s.io/v1beta3
          networking:
            podSubnet: "10.244.0.0/16"
          ---
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          runtimeRequestTimeout: "15m"
          cgroupDriver: "systemd"
          systemReserved:
            cpu: 100m
            memory: 350M
          kubeReserved:
            cpu: 100m
            memory: 50M
          enforceNodeAllocatable:
          - pods

- name: Initialize the Kubernetes cluster using kubeadm
  shell: kubeadm init --config /etc/kubernetes/kubeadm-config.yaml > kubeadm_init.log
  args:
    chdir: /home/k8s
    creates: kubeadm_init.log

# Join worker nodes to the cluster here

- name: create .kube directory
  become: yes
  become_user: k8s
  file:
    path: $HOME/.kube
    state: directory
    mode: 0755

- name: copy admin.conf to user's kube config so kubectl works for k8s user
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/k8s/.kube/config
    remote_src: yes
    owner: k8s
    mode: '0644'

- name: install Pod network
  become: yes
  become_user: k8s
  shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml > pod_network_setup.log
  args:
    chdir: $HOME
    creates: pod_network_setup.log

- name: Allow pods to be scheduled on the control plane node
  become: yes
  become_user: k8s
  shell: kubectl taint nodes --all node-role.kubernetes.io/control-plane- > taint_nodes.log
  args:
    chdir: $HOME
    creates: taint_nodes.log